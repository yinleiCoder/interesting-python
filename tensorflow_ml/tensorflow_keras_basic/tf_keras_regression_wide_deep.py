# -*- coding: utf-8 -*-
"""tf_keras_regression-wide_deep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tpVyBkkZHCxGnhKFB2FhVSlwjFMNWoyW

# Wide & Deep模型

- 16年发布，用于分类和回归
- 应用到了Google Play中的应用推荐
- 原始论文：https://arxiv.org/pdf/1606.07792v1.pdf

- 稀疏特征
  - 离散值特征
  - One-hot表示
  - 如：词表={人工智能，你，他....}, 他=[0,0,1,0....]
  - 叉乘={(计算机，人工智能),(计算机，你),,,,}
  - 叉乘之后，共现信息、实现记忆的效果
  - 有效，广泛用于工业界，但需要人工设计，可能过拟合，所有特征都叉乘，相当于记住每一个样本
- 密集特征
  - 向量表达
  - 如：词表={人工智能，你，他}，他=[0.3, 0.2, 0.6(n维向量)]
  - Word2vec工具
  - 有语义信息，不同向量之间有相关性，兼容没有出现过的特征组合，更少的人工参与
  - 但会过渡泛化，推荐不怎么相关的产品
"""

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import numpy as np 
import sklearn
import pandas as pd 
import os 
import sys 
import time 
import tensorflow as tf
from tensorflow import keras

print(tf.__version__)
print(sys.version_info)
for module in mpl, np, pd, sklearn, tf, keras:
  print(module.__name__, module.__version__)

# 数据集展示与读取(关于加利福尼亚房价的数据集，每个样本的特征维度是8，收入、房龄、房间数量、卧室数量、街道人口、入住人家、房屋经度、房屋维度等)
from sklearn.datasets import fetch_california_housing
housing = fetch_california_housing()
print(housing.DESCR)
print(housing.data.shape)
print(housing.target.shape)

# 划分数据集
from sklearn.model_selection import train_test_split
# test_size指划分的训练集和测试集的比例。默认为0.25表示数据分为4份，测试集占1份
x_train_all, x_test, y_train_all, y_test = train_test_split(housing.data, housing.target, random_state=7)
x_train, x_valid, y_train, y_valid = train_test_split(x_train_all, y_train_all, random_state=11)
print(x_train.shape, y_train.shape)
print(x_valid.shape, y_valid.shape)
print(x_test.shape, y_test.shape)

# 归一化
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_valid_scaled = scaler.transform(x_valid)
x_test_scaled = scaler.transform(x_test)

# Wide&Deep模型(函数式API)
"""
input = keras.layers.Input(shape=x_train.shape[1:])
hidden1 = keras.layers.Dense(30, activation='relu')(input)
hidden2 = keras.layers.Dense(30, activation='relu')(hidden1)
concat = keras.layers.concatenate([input, hidden2])
output = keras.layers.Dense(1)(concat)
model = keras.models.Model(inputs=[input],
              outputs=[output])
"""
# Wide&Deep模型(子类API)
"""
class WideDeepModel(keras.models.Model):
  def __init__(self):
    super().__init__()
    #定义模型的层次
    self.hidden1_layer = keras.layers.Dense(30, activation='relu')
    self.hidden2_layer = keras.layers.Dense(30, activation='relu')
    self.output_layer = keras.layers.Dense(1)
  
  def call(self, input):
    #完成模型的正向计算
    hidden1 = self.hidden1_layer(input)
    hidden2 = self.hidden2_layer(hidden1)
    concat = keras.layers.concatenate([input, hidden2])
    output = self.output_layer(concat)
    return output

model = WideDeepModel()
model.build(input_shape=(None, 8))
"""

# Wide&Deep模型(多输入,多输出)
input_wide = keras.layers.Input(shape=[5])
input_deep = keras.layers.Input(shape=[6])
hidden1 = keras.layers.Dense(30, activation='relu')(input_deep)
hidden2 = keras.layers.Dense(30, activation='relu')(hidden1)
concat = keras.layers.concatenate([input_wide, hidden2])
output = keras.layers.Dense(1)(concat)
model = keras.models.Model(inputs=[input_wide, input_deep],
              outputs=[output])

model.summary()

model.compile(loss='mean_squared_error', optimizer='sgd')

# 多输入，多输出
x_train_scaled_wide = x_train_scaled[:, :5]
x_train_scaled_deep = x_train_scaled[:, 2:]
x_valid_scaled_wide = x_valid_scaled[:, :5]
x_valid_scaled_deep = x_valid_scaled[:, 2:]
x_test_scaled_wide = x_test_scaled[:, :5]
x_test_scaled_deep = x_test_scaled[:, 2:]

# 回调函数
callbacks = [
    keras.callbacks.EarlyStopping(patience=5, min_delta=1e-2),
]
history = model.fit([x_train_scaled_wide, x_train_scaled_deep], y_train, epochs=100, 
            validation_data=([x_valid_scaled_wide, x_valid_scaled_deep], y_valid),
            callbacks=callbacks)

def plot_learning_curves(history):
  pd.DataFrame(history.history).plot(figsize=(8, 5))
  plt.grid(True)
  plt.gca().set_ylim(0, 1)
  plt.show()

plot_learning_curves(history)

model.evaluate([x_test_scaled_wide, x_test_scaled_deep], y_test)