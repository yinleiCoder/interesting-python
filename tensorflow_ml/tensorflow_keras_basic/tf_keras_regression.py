# -*- coding: utf-8 -*-
"""tf_keras_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_sZd-IzGmgK_02ekNOAGV4TxMnAPqQ9z

## **回归问题**
"""

import matplotlib as mpl 
import matplotlib.pyplot as plt 
import numpy as np 
import sklearn
import pandas as pd 
import os 
import sys 
import time 
import tensorflow as tf
from tensorflow import keras

print(tf.__version__)
print(sys.version_info)
for module in mpl, np, pd, sklearn, tf, keras:
  print(module.__name__, module.__version__)

# 数据集展示与读取(关于加利福尼亚房价的数据集，每个样本的特征维度是8，收入、房龄、房间数量、卧室数量、街道人口、入住人家、房屋经度、房屋维度等)
from sklearn.datasets import fetch_california_housing
housing = fetch_california_housing()
print(housing.DESCR)
print(housing.data.shape)
print(housing.target.shape)

# 查看前5个数据是什么样子
import pprint
pprint.pprint(housing.data[0:5])
pprint.pprint(housing.target[0:5])

# 划分数据集
from sklearn.model_selection import train_test_split
# test_size指划分的训练集和测试集的比例。默认为0.25表示数据分为4份，测试集占1份
x_train_all, x_test, y_train_all, y_test = train_test_split(housing.data, housing.target, random_state=7)
x_train, x_valid, y_train, y_valid = train_test_split(x_train_all, y_train_all, random_state=11)
print(x_train.shape, y_train.shape)
print(x_valid.shape, y_valid.shape)
print(x_test.shape, y_test.shape)

# 归一化
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_valid_scaled = scaler.transform(x_valid)
x_test_scaled = scaler.transform(x_test)

model = keras.models.Sequential([
    keras.layers.Dense(30, activation='relu', input_shape=x_train.shape[1:]),
    keras.layers.Dense(1),
])

model.summary

model.compile(loss='mean_squared_error', optimizer='sgd')

# 回调函数
callbacks = [
    keras.callbacks.EarlyStopping(patience=5, min_delta=1e-2),
]
history = model.fit(x_train_scaled, y_train, epochs=100, 
            validation_data=(x_valid_scaled, y_valid),
            callbacks=callbacks)

def plot_learning_curves(history):
  pd.DataFrame(history.history).plot(figsize=(8, 5))
  plt.grid(True)
  plt.gca().set_ylim(0, 1)
  plt.show()

plot_learning_curves(history)

model.evaluate(x_test_scaled, y_test)

